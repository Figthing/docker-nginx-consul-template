user  nginx;
worker_processes  auto;
worker_rlimit_nofile 100000;

error_log  /var/log/nginx/error.log warn;

pid        /var/run/nginx.pid;

events {
    use epoll;
    worker_connections  1024;
    multi_accept on;
}

http {

	include /etc/nginx/http.conf;

	#+--------------- constul template start ---------------+#
	
	{{ range $service := services }}
		{{ with $tags := .Tags | join "," }}
			{{ if $tags | contains "domain" }}
				{{ with $obj := $tags | regexReplaceAll "(.*)" "{$1}" | parseJSON }}
				
					 {{ range $index, $serviceItem := service $service.Name }}
						
						{{ $ip := printf "%s:%d" $serviceItem.Address $serviceItem.Port }}
						{{ $ipEncode := $ip | base64Encode }}
						{{ $ipKey := printf "ip%d" $index }}
						
						{{ if $obj.dir }}
						
							{{ $key := printf "%s/%s" $obj.domain $obj.dir }}
							
							{{ if scratch.MapValues $key | contains $ip }} {{ else }}
							
								# save ip list
								{{ scratch.MapSet $key $ipKey $ip }}
									
								# domain => dir => ip list
								{{ $data := scratch.Get $key}}
								{{ scratch.MapSet $obj.domain $obj.dir $data }}
							
							{{ end }}
						
						{{ else }}
							
							{{ $key := printf "%s/www" $obj.domain }}
							
							{{ if scratch.MapValues $key | contains $ip }} {{ else }}
							
								# save ip list
								{{ scratch.MapSet $key $ipKey $ip }}
									
								# domain => dir => ip list
								{{ $data := scratch.Get $key}}
								{{ scratch.MapSet $obj.domain "www" $data }}
							
							{{ end }}
						{{ end }}

					{{ end }}
					
					{{ $data := scratch.Get $obj.domain }}
					{{ scratch.MapSet "www" $obj.domain $data }}
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
	
	
	{{ range $domain, $list := scratch.Get "www" }}
	
		{{ range $dir, $item := $list }}
			# {{ printf "%s/%s" $domain $dir }}
			upstream {{ printf "%s/%s" $domain $dir | base64Encode }} {
				{{ range $item }}
					server {{ . }} max_fails=0 fail_timeout=10s;
				{{ end }}
				keepalive 20000;
			}
		{{ end }}
		
		server {
            server_name {{ $domain }};
			listen 80;
			
			{{ range $dir, $item := $list }}
					{{ if ne $dir "www" }}
						location /{{$dir}}/ {
					{{ else }}	
						location / {
					{{ end }}
				
					# {{ printf "%s/%s" $domain $dir }}
					proxy_pass http://{{ printf "%s/%s" $domain $dir | base64Encode }}/;
					proxy_redirect             off;
					proxy_set_header           Host $host;
					proxy_set_header           X-Real-IP $remote_addr;
					proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for;
					proxy_connect_timeout      300;
					proxy_send_timeout         300;
					proxy_read_timeout         300;
					proxy_buffer_size          4k;
					proxy_buffers              4 32k;
					proxy_busy_buffers_size    64k;
					proxy_temp_file_write_size 64k;
					ssi off;
					autoindex off;
				}
			{{ end }}
        }
	{{ end }}


	#+--------------- constul template end ---------------+#

	include /etc/nginx/conf.d/*.conf;
}


